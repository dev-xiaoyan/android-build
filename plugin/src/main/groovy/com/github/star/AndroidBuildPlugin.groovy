/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package com.github.star

import org.gradle.api.Project
import org.gradle.api.Plugin

class AndroidBuildPlugin implements Plugin<Project> {
    void apply(Project project) {
        def buildService = project.gradle.sharedServices.registerIfAbsent("android build service", AndroidBuildService) {
        }
        def service = buildService.get()
        def extension = project.extensions.create("android_build", AndroidBuildExtension)
        service.reportTask.convention(project.tasks.register("report_build_result", ReportBuildResultTask) { task ->
            task.group = service.BUILD_TOOL_TASK_GROUP
            task.description = ""
            task.usesService(buildService)
            task.service.set(buildService)
            task.onlyIf {
                return service.reportEnabled
            }
        })
        service.replacementTask.convention(project.tasks.register("res_replacement", ResReplacementTask) { task ->
            task.group = service.BUILD_TOOL_TASK_GROUP
            task.description = ""
            task.usesService(buildService)
            task.service.set(buildService)
            task.finalizedBy(service.reportTask)
            task.onlyIf {
                return service.replacementEnabled
            }
        })
        service.uploadTask.convention(project.tasks.register("upload_amazon", AmazonUploadTask) { task ->
            task.group = service.BUILD_TOOL_TASK_GROUP
            task.description = ""
            task.usesService(buildService)
            task.service.set(buildService)
            task.finalizedBy(service.reportTask)
            task.mustRunAfter(service.assembleTask)
            task.onlyIf {
                return service.uploadEnabled
            }
        })

        service.androidBuildTask.convention(project.tasks.register("build_android") { task ->
            task.group = service.BUILD_TOOL_TASK_GROUP
            task.description = ""
            task.dependsOn(service.replacementTask)
            task.finalizedBy(service.assembleTask, service.uploadTask, service.reportTask)
            task.onlyIf {
                return service.androidBuildEnabled
            }
        })

        service.assembleTask.convention(project.tasks.register(service.ASSEMBLE_NOT_FOUND_TASK) { task ->
            group = service.BUILD_TOOL_TASK_GROUP
            task.doFirst {
                logger.error("找不到Android构建任务")
            }
        })

        PropsConfig.metaClass.setExt = { String key, String value ->
            project.allprojects.each {
                it.ext[key] = value
            }
        }
        project.extensions.configure(AndroidBuildExtension) { ext ->
            extension.service = buildService
            extension.replacements.metaClass.dir = { String dir, Closure cl ->
                cl.delegate = new Object() {
                    @Override
                    Object getProperty(String propertyName) {
                        try {
                            return super.getProperty(propertyName)
                        } catch (e) {
                            return ext.replacements.maybeCreate("$dir/$propertyName")
                        }
                    }

                    @Override
                    Object invokeMethod(String name, Object args) {
                        try {
                            return super.invokeMethod(name, args)
                        } catch (e) {
                            return ext.replacements.maybeCreate("$dir/$name")
                        }
                    }
                }
                cl()
            }
        }

        project.afterEvaluate {
            extension.props.each { p ->
                project.allprojects.each {
                    it.ext[p.name] = p.value
                }
            }
            def app = project.evaluationDependsOn(":app")
            app.android.applicationVariants.all { variant ->
                if (variant.buildType.name == "release") {
                    variant.productFlavors.each { flavor ->
                        def buildConfigFields = flavor.buildConfigFields
                        def channel = buildConfigFields.CHANNEL.value.replace("\"", "")
                        String flavorName = flavor.name
                        def assembleTask = app.tasks.findByName("assemble${flavorName.capitalize()}Release")
                        if (channel == extension.channel.value && assembleTask != null) {
                            String host = buildConfigFields.HOST.value.replace("\"", "")
                            println("找到可打包配置:${flavor.name},服务器:${host}")
                            service.server.set(host)
                            service.flavor.set(flavorName)
                            service.assembleTask.set(assembleTask)
                            service.apkFileDir.set(app.layout.buildDirectory.dir("intermediates/apk/$flavorName/release/"))
                        }
                    }
                }
            }
        }
    }
}
